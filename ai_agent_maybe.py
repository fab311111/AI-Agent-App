# -*- coding: utf-8 -*-
"""Ai Agent maybe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I1Z3IGdU_FmuDTfK20cmsCYFvu12xBWj
"""

!pip install streamlit pandas scikit-learn shap numpy

import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
import shap

st.set_page_config(page_title="HR Attrition AI Agent", layout="centered")

st.title("ðŸ¤– HR Attrition AI Chat Agent")
st.caption("An intelligent HR assistant trained on the IBM HR dataset to predict and explain attrition risk.")

# --- Train Model Once and Cache It ---
@st.cache_resource
def train_model():
    df = pd.read_csv("WA_Fn-UseC_-HR-Employee-Attrition.csv")
    df = df.dropna()

    df["Attrition"] = df["Attrition"].map({"Yes": 1, "No": 0})

    # Encode categoricals
    cat_cols = df.select_dtypes(exclude=np.number).columns
    le_dict = {}
    for col in cat_cols:
        le = LabelEncoder()
        df[col] = le.fit_transform(df[col])
        le_dict[col] = le

    X = df.drop(columns=["Attrition", "EmployeeNumber"])
    y = df["Attrition"]

    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    model = RandomForestClassifier(n_estimators=200, random_state=42)
    model.fit(X_scaled, y)

    return model, scaler, le_dict, X.columns, df

model, scaler, le_dict, feature_names, df = train_model()
explainer = shap.TreeExplainer(model)

# --- Initialize Session State ---
if "chat_state" not in st.session_state:
    st.session_state.chat_state = {
        "stage": "greeting",
        "inputs": {},
        "messages": [],
    }

chat = st.session_state.chat_state

# --- Helper to Display Chat Messages ---
def display_messages():
    for msg in chat["messages"]:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

display_messages()

# --- Conversation Logic ---
user_input = st.chat_input("Type your response...")

def ask_next_question():
    """Ask next missing relevant feature."""
    needed = ["Age", "JobRole", "MonthlyIncome", "JobSatisfaction", "WorkLifeBalance", "YearsAtCompany", "OverTime"]
    for feature in needed:
        if feature not in chat["inputs"]:
            if feature == "Age":
                return "What is the employee's **Age**?"
            elif feature == "JobRole":
                return "What is their **Job Role**? (e.g., Sales Executive, Research Scientist, Laboratory Technician)"
            elif feature == "MonthlyIncome":
                return "What is their **Monthly Income (in USD)**?"
            elif feature == "JobSatisfaction":
                return "On a scale of 1â€“4, what is their **Job Satisfaction**?"
            elif feature == "WorkLifeBalance":
                return "On a scale of 1â€“4, how is their **Work Life Balance**?"
            elif feature == "YearsAtCompany":
                return "How many **Years at Company**?"
            elif feature == "OverTime":
                return "Do they work **OverTime**? (Yes/No)"
    return None

def predict_attrition():
    """Generate prediction using trained model."""
    user_data = pd.DataFrame([{
        "Age": chat["inputs"]["Age"],
        "MonthlyIncome": chat["inputs"]["MonthlyIncome"],
        "JobSatisfaction": chat["inputs"]["JobSatisfaction"],
        "WorkLifeBalance": chat["inputs"]["WorkLifeBalance"],
        "YearsAtCompany": chat["inputs"]["YearsAtCompany"],
        "OverTime": 1 if chat["inputs"]["OverTime"].lower().startswith("y") else 0,
        "JobRole_Research Scientist": 1 if "research" in chat["inputs"]["JobRole"].lower() else 0,
        "JobRole_Laboratory Technician": 1 if "technician" in chat["inputs"]["JobRole"].lower() else 0,
        "JobRole_Sales Executive": 1 if "sales" in chat["inputs"]["JobRole"].lower() else 0,
    }])

    # Align columns with training data
    for col in feature_names:
        if col not in user_data.columns:
            user_data[col] = 0

    user_data = user_data[feature_names]
    scaled_data = scaler.transform(user_data)

    prob = model.predict_proba(scaled_data)[0][1]
    pred = "Yes" if prob > 0.5 else "No"

    risk = "ðŸ”´ High" if prob > 0.7 else "ðŸŸ  Medium" if prob > 0.4 else "ðŸŸ¢ Low"
    explanation = f"Predicted Attrition: **{pred}**\n\nRisk Level: {risk}\nProbability: `{prob:.2f}`"

    shap_values = explainer.shap_values(user_data)
    st.write("### ðŸ§­ Key Factors Affecting Prediction")
    shap.initjs()
    st.components.v1.html(
        shap.force_plot(explainer.expected_value[1], shap_values[1], user_data, matplotlib=False).html(),
        height=300
    )

    # --- HR Recommendations ---
    if risk == "ðŸ”´ High":
        rec = "- Schedule mentoring or retention interview.\n- Review workload and overtime.\n- Offer flexible hours or recognition."
    elif risk == "ðŸŸ  Medium":
        rec = "- Offer development opportunities.\n- Recognize achievements and improve engagement."
    else:
        rec = "- Maintain engagement and monitor satisfaction."

    explanation += f"\n\n**Recommendations:**\n{rec}"
    return explanation

# --- Process User Input ---
if user_input:
    chat["messages"].append({"role": "user", "content": user_input})

    # Greeting / Intent
    if chat["stage"] == "greeting":
        chat["messages"].append({
            "role": "assistant",
            "content": "Hello! I can help you predict an employee's attrition risk. Let's start with some details."
        })
        chat["stage"] = "collecting"
        next_q = ask_next_question()
        chat["messages"].append({"role": "assistant", "content": next_q})

    elif chat["stage"] == "collecting":
        # Save answers in order
        if "Age" not in chat["inputs"]:
            chat["inputs"]["Age"] = int(user_input)
        elif "JobRole" not in chat["inputs"]:
            chat["inputs"]["JobRole"] = user_input
        elif "MonthlyIncome" not in chat["inputs"]:
            chat["inputs"]["MonthlyIncome"] = float(user_input)
        elif "JobSatisfaction" not in chat["inputs"]:
            chat["inputs"]["JobSatisfaction"] = int(user_input)
        elif "WorkLifeBalance" not in chat["inputs"]:
            chat["inputs"]["WorkLifeBalance"] = int(user_input)
        elif "YearsAtCompany" not in chat["inputs"]:
            chat["inputs"]["YearsAtCompany"] = int(user_input)
        elif "OverTime" not in chat["inputs"]:
            chat["inputs"]["OverTime"] = user_input

        next_q = ask_next_question()
        if next_q:
            chat["messages"].append({"role": "assistant", "content": next_q})
        else:
            chat["stage"] = "predicting"
            result = predict_attrition()
            chat["messages"].append({"role": "assistant", "content": result})
            chat["stage"] = "done"

    display_messages()

    # Auto-scroll chat
    st.experimental_rerun()